name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 추가
      - name: resources 파일 만들기
        run: mkdir -p src/main/resources

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.yml

      # 추가
      - name: gradlew 권한주기
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t evc-server .

      - name: Docker 이미지에 Tag 붙이기 # ecr 주소값을 태그로
        run: docker tag evc-server ${{ steps.login-ecr.outputs.registry }}/evc-server:latest

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/evc-server:latest

      - name: docker-compose.yml Base64 인코딩 후 로컬에 저장
        run: echo "${{ secrets.DOCKER_COMPOSE_YML }}" | base64 -d > docker-compose.yml

      - name: docker-compose.yml 파일을 EC2로 업로드!!
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/"

      - name: SSH로 EC2에 접속해서 도커 컴포즈 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker-compose down || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/evc-server:latest
            docker-compose up -d --build

#            docker stop evc-server || true
#            docker rm evc-server || true
#            docker pull ${{ steps.login-ecr.outputs.registry }}/evc-server:latest
#            docker run -d --name evc-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/evc-server:latest
