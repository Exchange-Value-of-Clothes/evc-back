plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.yzgeneration'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:1.1.5'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'

	runtimeOnly 'com.mysql:mysql-connector-j'

	//Spring Rest Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//AWS S3
	implementation("com.amazonaws:aws-java-sdk-s3:1.12.261")

	//LocalStack (for S3 test)
	testImplementation("cloud.localstack:localstack-utils:0.2.20")
}

tasks.register('copyGitSubmodule', Copy) {
	description = "Copy application-*.yml from config"
	from './evc-back-config'
	include '*.yml'
	into './src/main/resources'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	// Asciidoctor 태스크 설정
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'

	sources {
		include '**/index.adoc'
	}

	// 경로 베이스 설정
	baseDirFollowsSourceFile()
	dependsOn tasks.test
}

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 중복 항목을 무시
	dependsOn tasks.named('asciidoctor') // asciidoctor 작업 포함
	from(tasks.named('asciidoctor').get().outputDir) {
		into 'static/docs'
	}
}


