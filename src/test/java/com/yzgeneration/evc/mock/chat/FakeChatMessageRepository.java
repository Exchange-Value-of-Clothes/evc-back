package com.yzgeneration.evc.mock.chat;

import com.yzgeneration.evc.common.dto.SliceResponse;
import com.yzgeneration.evc.domain.chat.dto.ChatMessageResponse;
import com.yzgeneration.evc.domain.chat.dto.ChatMessageSliceResponse;
import com.yzgeneration.evc.domain.chat.dto.ChatRoomListResponse;
import com.yzgeneration.evc.domain.chat.infrastructure.ChatMessageRepository;
import com.yzgeneration.evc.domain.chat.model.ChatMessage;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.SliceImpl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

public class FakeChatMessageRepository implements ChatMessageRepository {

    private Long autoGeneratedId = 0L;
    private final List<ChatMessage> data = new ArrayList<>();

    @Override
    public ChatMessage save(ChatMessage chatMessage) {
        if (chatMessage.getId() == null || chatMessage.getId() == 0) {
            ChatMessage newChatMessage = ChatMessage.builder()
                    .id(++autoGeneratedId)
                    .chatRoomId(chatMessage.getChatRoomId())
                    .senderId(chatMessage.getSenderId())
                    .content(chatMessage.getContent())
                    .isRead(chatMessage.getIsRead())
                    .createdAt(chatMessage.getCreatedAt())
                    .build();
            data.add(newChatMessage);
            return newChatMessage;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), chatMessage.getId()));
            data.add(chatMessage);
            return chatMessage;
        }

    }

    @Override
    public SliceResponse<ChatRoomListResponse> getChatRooms(Long memberId, LocalDateTime cursor) {
        int size = 10;

        // 해당 사용자가 속한 채팅방의 메시지 필터링
        List<ChatMessage> messages = data.stream()
                .filter(msg -> msg.getSenderId().equals(memberId))
                .filter(msg -> cursor == null || msg.getCreatedAt().isBefore(cursor)) // 커서 기준 이전 메시지만 조회
                .sorted(Comparator.comparing(ChatMessage::getCreatedAt).reversed()) // 최신순 정렬
                .limit(size + 1) // hasNext 확인을 위해 size+1 조회
                .toList();

        // hasNext 처리
        boolean hasNext = messages.size() > size;
        if (hasNext) {
            messages = messages.subList(0, size);
        }

        LocalDateTime lastCreatedAt = messages.isEmpty() ? null : messages.get(messages.size() - 1).getCreatedAt();

        // ChatRoomListResponse 변환
        List<ChatRoomListResponse> response = messages.stream()
                .map(msg -> new ChatRoomListResponse(msg.getChatRoomId(), msg.getContent(), msg.getCreatedAt()))
                .toList();

        return new SliceResponse<>(
                new SliceImpl<>(response, PageRequest.of(0, size), hasNext),
                lastCreatedAt
        );
    }


    @Override
    public ChatMessageSliceResponse getLastMessages(Long chatRoomId, LocalDateTime cursor) {
        System.out.println("chatRoomId = " + chatRoomId);
        int size = 10;

        // 해당 채팅방의 메시지 필터링
        List<ChatMessageResponse> messages = data.stream()
                .filter(msg -> msg.getChatRoomId().equals(chatRoomId))
                .filter(msg -> cursor == null || msg.getCreatedAt().isBefore(cursor)) // 커서 기준 이전 메시지만 조회
                .sorted(Comparator.comparing(ChatMessage::getCreatedAt).reversed()) // 최신순 정렬
                .limit(size + 1) // hasNext 확인을 위해 size+1 조회
                .map(msg -> new ChatMessageResponse(msg.getContent(), msg.getCreatedAt()))
                .toList();

        // hasNext 처리
        boolean hasNext = messages.size() > size;
        if (hasNext) {
            messages = messages.subList(0, size);
        }

        LocalDateTime lastCreatedAt = messages.isEmpty() ? null : messages.get(messages.size() - 1).getCreatedAt();

        return new ChatMessageSliceResponse(chatRoomId, new SliceImpl<>(messages, PageRequest.of(0, size), hasNext), lastCreatedAt);
    }


}
