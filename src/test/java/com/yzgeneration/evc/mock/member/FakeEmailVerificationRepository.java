package com.yzgeneration.evc.mock.member;

import com.yzgeneration.evc.exception.CustomException;
import com.yzgeneration.evc.domain.verification.infrastructure.EmailVerificationRepository;
import com.yzgeneration.evc.domain.verification.model.EmailVerification;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static com.yzgeneration.evc.exception.ErrorCode.*;

public class FakeEmailVerificationRepository implements EmailVerificationRepository {

    private static Long autoGeneratedId = 0L;
    private final List<EmailVerification> data = new ArrayList<>();

    @Override
    public EmailVerification save(EmailVerification emailVerification) {
        if (emailVerification.getId() == null || emailVerification.getId() == 0) {
            EmailVerification newEmailVerification = EmailVerification.builder()
                    .id(++autoGeneratedId)
                    .emailVerificationType(emailVerification.getEmailVerificationType())
                    .emailAddress(emailVerification.getEmailAddress())
                    .verificationCode(emailVerification.getVerificationCode())
                    .isVerified(emailVerification.isVerified())
                    .memberId(emailVerification.getMemberId())
                    .build();
            data.add(newEmailVerification);
            return newEmailVerification;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), emailVerification.getId()));
            data.add(emailVerification);
            return emailVerification;
        }
    }

    @Override
    public EmailVerification getByToken(String token) {
        return data.stream()
                .filter(item -> item.getVerificationCode().equals(token))
                .findFirst()
                .orElseThrow(() -> new CustomException(EMAIL_VERIFICATION_NOT_FOUND));
    }

    @Override
    public EmailVerification getByEmail(String email) {
        return data.stream()
                .filter(item -> item.getEmailAddress().equals(email))
                .findFirst()
                .orElseThrow(() -> new CustomException(EMAIL_VERIFICATION_NOT_FOUND));
    }

}
