package com.yzgeneration.evc.mock.member;

import com.yzgeneration.evc.exception.CustomException;
import com.yzgeneration.evc.domain.member.model.Member;
import com.yzgeneration.evc.domain.member.service.port.MemberRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static com.yzgeneration.evc.exception.ErrorCode.MEMBER_NOT_FOUND;

public class FakeMemberRepository implements MemberRepository {

    private Long autoGeneratedId = 0L;
    private final List<Member> data = new ArrayList<>();
    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMember = Member.builder()
                    .id(++autoGeneratedId)
                    .memberRole(member.getMemberRole())
                    .memberStatus(member.getMemberStatus())
                    .memberPrivateInformation(member.getMemberPrivateInformation())
                    .memberAuthenticationInformation(member.getMemberAuthenticationInformation())
                    .build();
            data.add(newMember);
            return newMember;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }

    @Override
    public boolean checkDuplicateEmail(String email) {
        return data.stream()
                .anyMatch(item -> item.getMemberPrivateInformation().getEmail().equals(email));
    }

    @Override
    public Member getByEmail(String email) {
        return data.stream()
                .filter(item -> item.getMemberPrivateInformation().getEmail().equals(email))
                .findFirst()
                .orElseThrow(() -> new CustomException(MEMBER_NOT_FOUND));
    }

    @Override
    public Member getById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new CustomException(MEMBER_NOT_FOUND));
    }

    @Override
    public Optional<Member> findSocialMember(String providerType, String providerId) {
        return Optional.empty();
    }

}
