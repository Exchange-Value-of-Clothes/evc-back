package com.yzgeneration.evc.mock.auctionitem;

import com.yzgeneration.evc.common.dto.SliceResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemResponse.AuctionItemDetailsResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemResponse.AuctionItemStatsResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemResponse.GetAuctionItemResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemsResponse.AuctionItemPriceDetailResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemsResponse.GetAuctionItemsResponse;
import com.yzgeneration.evc.domain.item.auctionitem.dto.AuctionItemsResponse.GetMyOrMemberAuctionItemsResponse;
import com.yzgeneration.evc.domain.item.auctionitem.model.AuctionItem;
import com.yzgeneration.evc.domain.item.auctionitem.service.port.AuctionItemRepository;
import com.yzgeneration.evc.domain.item.enums.TransactionType;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.SliceImpl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class FakeAuctionItemRepository implements AuctionItemRepository {

    private static Long autoGeneratedId = 0L;
    private static final List<AuctionItem> mockAuctionItem = new ArrayList<>();

    @Override
    public AuctionItem save(AuctionItem auctionItem) {
        if (auctionItem.getId() == null) {
            auctionItem = AuctionItem.builder()
                    .id(++autoGeneratedId)
                    .memberId(auctionItem.getMemberId())
                    .auctionItemDetails(auctionItem.getAuctionItemDetails())
                    .transactionType(TransactionType.DIRECT)
                    .viewCount(1L)
                    .auctionItemPriceDetails(auctionItem.getAuctionItemPriceDetails())
                    .transactionStatus(auctionItem.getTransactionStatus())
                    .itemStatus(auctionItem.getItemStatus())
                    .startTime(auctionItem.getStartTime())
                    .endTime(auctionItem.getEndTime())
                    .build();
        }

        mockAuctionItem.add(auctionItem);
        return auctionItem;
    }

    @Override
    public SliceResponse<GetAuctionItemsResponse> getAuctionItems(Long memberId, LocalDateTime cursor) {

        int size = 10;

        List<AuctionItem> auctionItemList = new ArrayList<>(mockAuctionItem.stream()
                .filter(auctionItem -> cursor == null || auctionItem.getStartTime().isBefore(cursor))
                .sorted(Comparator.comparing(AuctionItem::getStartTime).reversed())
                .limit(size + 1)
                .toList());

        boolean hasNext = auctionItemList.size() > size;
        if (hasNext) {
            auctionItemList.remove(size);
        }

        List<GetAuctionItemsResponse> auctionItemListResponses = auctionItemList.stream().map(
                auctionItem -> {
                    AuctionItemPriceDetailResponse auctionItemPriceDetailResponse = new AuctionItemPriceDetailResponse(auctionItem.getAuctionItemPriceDetails().getStartPrice(), auctionItem.getAuctionItemPriceDetails().getCurrentPrice(), auctionItem.getAuctionItemPriceDetails().getBidPrice());
                    return new GetAuctionItemsResponse(auctionItem.getId(), auctionItem.getAuctionItemDetails().getTitle(), auctionItem.getAuctionItemDetails().getCategory(), auctionItemPriceDetailResponse, 1L, "imageName.jpg", auctionItem.getStartTime(), auctionItem.getEndTime(), 1000, true);
                }
        ).toList();

        LocalDateTime localStartTime = !auctionItemListResponses.isEmpty() ? auctionItemListResponses.get(auctionItemListResponses.size() - 1).getStartTime() : null;

        return new SliceResponse<>(new SliceImpl<>(auctionItemListResponses, PageRequest.of(0, size), hasNext), localStartTime);
    }

    @Override
    public GetAuctionItemResponse findAuctionItemByMemberIdAndId(Long memberId, Long id) {
        return mockAuctionItem.stream()
                .filter(auction -> auction.getId().equals(id))
                .findFirst()
                .map(auctionItem -> {
                    AuctionItemDetailsResponse auctionItemDetailsResponse = new AuctionItemDetailsResponse(auctionItem.getAuctionItemDetails().getTitle(), auctionItem.getAuctionItemDetails().getCategory(), auctionItem.getAuctionItemDetails().getContent());
                    AuctionItemStatsResponse auctionItemStatsResponse = new AuctionItemStatsResponse(1L, 1L, 1L);
                    List<String> imageNameList = List.of("imageName.jpg");

                    return new GetAuctionItemResponse(auctionItemDetailsResponse, auctionItemStatsResponse, imageNameList, auctionItem.getTransactionType(), auctionItem.getStartTime(), auctionItem.getEndTime(), auctionItem.getAuctionItemPriceDetails().getStartPrice(), auctionItem.getAuctionItemPriceDetails().getCurrentPrice(), auctionItem.getAuctionItemPriceDetails().getBidPrice(), auctionItem.getMemberId(), "marketNickname", "profileImageName", auctionItem.getMemberId().equals(memberId), auctionItem.getItemStatus());
                }).get();
    }

    @Override
    public void updateCurrentPrice(Long id, int point) {

    }

    @Override
    public boolean checkMemberPointById(Long memberId, Long id, int point) {
        return false;
    }

    @Override
    public boolean canMemberBidByIdAndMemberId(Long id, Long memberId) {
        return false;
    }

    @Override
    public int getCurrentPriceById(Long auctionId) {
        return 0;
    }

    @Override
    public AuctionItem getById(Long id) {
        return null;
    }

    @Override
    public SliceResponse<GetAuctionItemsResponse> searchAuctionItems(String q, Long memberId, LocalDateTime cursor) {
        return null;
    }

    @Override
    public Long countParticipantById(Long id) {
        return null;
    }

    @Override
    public SliceResponse<GetMyOrMemberAuctionItemsResponse> getMyOrMemberAuctionItems(Long memberId, LocalDateTime cursor) {
        return null;
    }

    @Override
    public Long countAuctionItemByMemberId(Long memberId) {
        return null;
    }
}
